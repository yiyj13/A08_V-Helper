// Code generated by MockGen. DO NOT EDIT.
// Source: message.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	model "v-helper/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIMessageService is a mock of IMessageService interface.
type MockIMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageServiceMockRecorder
}

// MockIMessageServiceMockRecorder is the mock recorder for MockIMessageService.
type MockIMessageServiceMockRecorder struct {
	mock *MockIMessageService
}

// NewMockIMessageService creates a new mock instance.
func NewMockIMessageService(ctrl *gomock.Controller) *MockIMessageService {
	mock := &MockIMessageService{ctrl: ctrl}
	mock.recorder = &MockIMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessageService) EXPECT() *MockIMessageServiceMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockIMessageService) CreateMessage(message model.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockIMessageServiceMockRecorder) CreateMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockIMessageService)(nil).CreateMessage), message)
}

// DeleteMessageByID mocks base method.
func (m *MockIMessageService) DeleteMessageByID(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessageByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessageByID indicates an expected call of DeleteMessageByID.
func (mr *MockIMessageServiceMockRecorder) DeleteMessageByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessageByID", reflect.TypeOf((*MockIMessageService)(nil).DeleteMessageByID), id)
}

// GetAllMessages mocks base method.
func (m *MockIMessageService) GetAllMessages() ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMessages")
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMessages indicates an expected call of GetAllMessages.
func (mr *MockIMessageServiceMockRecorder) GetAllMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMessages", reflect.TypeOf((*MockIMessageService)(nil).GetAllMessages))
}

// GetMessageByID mocks base method.
func (m *MockIMessageService) GetMessageByID(id uint) (model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByID", id)
	ret0, _ := ret[0].(model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByID indicates an expected call of GetMessageByID.
func (mr *MockIMessageServiceMockRecorder) GetMessageByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByID", reflect.TypeOf((*MockIMessageService)(nil).GetMessageByID), id)
}

// UpdateMessageByID mocks base method.
func (m *MockIMessageService) UpdateMessageByID(message model.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessageByID", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMessageByID indicates an expected call of UpdateMessageByID.
func (mr *MockIMessageServiceMockRecorder) UpdateMessageByID(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessageByID", reflect.TypeOf((*MockIMessageService)(nil).UpdateMessageByID), message)
}
