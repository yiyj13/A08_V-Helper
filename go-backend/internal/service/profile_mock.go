// Code generated by MockGen. DO NOT EDIT.
// Source: profile.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	model "v-helper/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIProfileService is a mock of IProfileService interface.
type MockIProfileService struct {
	ctrl     *gomock.Controller
	recorder *MockIProfileServiceMockRecorder
}

// MockIProfileServiceMockRecorder is the mock recorder for MockIProfileService.
type MockIProfileServiceMockRecorder struct {
	mock *MockIProfileService
}

// NewMockIProfileService creates a new mock instance.
func NewMockIProfileService(ctrl *gomock.Controller) *MockIProfileService {
	mock := &MockIProfileService{ctrl: ctrl}
	mock.recorder = &MockIProfileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProfileService) EXPECT() *MockIProfileServiceMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method.
func (m *MockIProfileService) CreateProfile(profile model.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockIProfileServiceMockRecorder) CreateProfile(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockIProfileService)(nil).CreateProfile), profile)
}

// DeleteProfileByID mocks base method.
func (m *MockIProfileService) DeleteProfileByID(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfileByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfileByID indicates an expected call of DeleteProfileByID.
func (mr *MockIProfileServiceMockRecorder) DeleteProfileByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileByID", reflect.TypeOf((*MockIProfileService)(nil).DeleteProfileByID), id)
}

// GetAllProfiles mocks base method.
func (m *MockIProfileService) GetAllProfiles() ([]model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProfiles")
	ret0, _ := ret[0].([]model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProfiles indicates an expected call of GetAllProfiles.
func (mr *MockIProfileServiceMockRecorder) GetAllProfiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProfiles", reflect.TypeOf((*MockIProfileService)(nil).GetAllProfiles))
}

// GetProfileByID mocks base method.
func (m *MockIProfileService) GetProfileByID(id uint) (model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByID", id)
	ret0, _ := ret[0].(model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByID indicates an expected call of GetProfileByID.
func (mr *MockIProfileServiceMockRecorder) GetProfileByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByID", reflect.TypeOf((*MockIProfileService)(nil).GetProfileByID), id)
}

// GetProfilesByUserID mocks base method.
func (m *MockIProfileService) GetProfilesByUserID(userID uint) ([]model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfilesByUserID", userID)
	ret0, _ := ret[0].([]model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfilesByUserID indicates an expected call of GetProfilesByUserID.
func (mr *MockIProfileServiceMockRecorder) GetProfilesByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfilesByUserID", reflect.TypeOf((*MockIProfileService)(nil).GetProfilesByUserID), userID)
}

// UpdateProfileByID mocks base method.
func (m *MockIProfileService) UpdateProfileByID(id uint, profile model.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfileByID", id, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfileByID indicates an expected call of UpdateProfileByID.
func (mr *MockIProfileServiceMockRecorder) UpdateProfileByID(id, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileByID", reflect.TypeOf((*MockIProfileService)(nil).UpdateProfileByID), id, profile)
}
