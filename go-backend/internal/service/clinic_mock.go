// Code generated by MockGen. DO NOT EDIT.
// Source: clinic.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	model "v-helper/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIClinicService is a mock of IClinicService interface.
type MockIClinicService struct {
	ctrl     *gomock.Controller
	recorder *MockIClinicServiceMockRecorder
}

// MockIClinicServiceMockRecorder is the mock recorder for MockIClinicService.
type MockIClinicServiceMockRecorder struct {
	mock *MockIClinicService
}

// NewMockIClinicService creates a new mock instance.
func NewMockIClinicService(ctrl *gomock.Controller) *MockIClinicService {
	mock := &MockIClinicService{ctrl: ctrl}
	mock.recorder = &MockIClinicServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClinicService) EXPECT() *MockIClinicServiceMockRecorder {
	return m.recorder
}

// CreateClinic mocks base method.
func (m *MockIClinicService) CreateClinic(clinic model.VaccineClinicList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClinic", clinic)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClinic indicates an expected call of CreateClinic.
func (mr *MockIClinicServiceMockRecorder) CreateClinic(clinic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinic", reflect.TypeOf((*MockIClinicService)(nil).CreateClinic), clinic)
}

// DeleteClinicByID mocks base method.
func (m *MockIClinicService) DeleteClinicByID(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClinicByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClinicByID indicates an expected call of DeleteClinicByID.
func (mr *MockIClinicServiceMockRecorder) DeleteClinicByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClinicByID", reflect.TypeOf((*MockIClinicService)(nil).DeleteClinicByID), id)
}

// GetAllClinics mocks base method.
func (m *MockIClinicService) GetAllClinics() ([]model.VaccineClinicList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllClinics")
	ret0, _ := ret[0].([]model.VaccineClinicList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllClinics indicates an expected call of GetAllClinics.
func (mr *MockIClinicServiceMockRecorder) GetAllClinics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllClinics", reflect.TypeOf((*MockIClinicService)(nil).GetAllClinics))
}

// GetClinicByID mocks base method.
func (m *MockIClinicService) GetClinicByID(id uint) (model.VaccineClinicList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClinicByID", id)
	ret0, _ := ret[0].(model.VaccineClinicList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClinicByID indicates an expected call of GetClinicByID.
func (mr *MockIClinicServiceMockRecorder) GetClinicByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClinicByID", reflect.TypeOf((*MockIClinicService)(nil).GetClinicByID), id)
}

// GetClinicsByClinicName mocks base method.
func (m *MockIClinicService) GetClinicsByClinicName(clinicName string) (model.Clinic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClinicsByClinicName", clinicName)
	ret0, _ := ret[0].(model.Clinic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClinicsByClinicName indicates an expected call of GetClinicsByClinicName.
func (mr *MockIClinicServiceMockRecorder) GetClinicsByClinicName(clinicName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClinicsByClinicName", reflect.TypeOf((*MockIClinicService)(nil).GetClinicsByClinicName), clinicName)
}

// GetClinicsByVaccineID mocks base method.
func (m *MockIClinicService) GetClinicsByVaccineID(vaccineID uint) ([]model.VaccineClinicList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClinicsByVaccineID", vaccineID)
	ret0, _ := ret[0].([]model.VaccineClinicList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClinicsByVaccineID indicates an expected call of GetClinicsByVaccineID.
func (mr *MockIClinicServiceMockRecorder) GetClinicsByVaccineID(vaccineID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClinicsByVaccineID", reflect.TypeOf((*MockIClinicService)(nil).GetClinicsByVaccineID), vaccineID)
}

// GetClinicsByVaccineName mocks base method.
func (m *MockIClinicService) GetClinicsByVaccineName(vaccineName string) ([]clinicPosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClinicsByVaccineName", vaccineName)
	ret0, _ := ret[0].([]clinicPosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClinicsByVaccineName indicates an expected call of GetClinicsByVaccineName.
func (mr *MockIClinicServiceMockRecorder) GetClinicsByVaccineName(vaccineName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClinicsByVaccineName", reflect.TypeOf((*MockIClinicService)(nil).GetClinicsByVaccineName), vaccineName)
}

// UpdateClinicByID mocks base method.
func (m *MockIClinicService) UpdateClinicByID(id uint, clinic model.VaccineClinicList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClinicByID", id, clinic)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClinicByID indicates an expected call of UpdateClinicByID.
func (mr *MockIClinicServiceMockRecorder) UpdateClinicByID(id, clinic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicByID", reflect.TypeOf((*MockIClinicService)(nil).UpdateClinicByID), id, clinic)
}
