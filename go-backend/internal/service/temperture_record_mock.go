// Code generated by MockGen. DO NOT EDIT.
// Source: temperture_record.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	model "v-helper/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockITempertureRecordService is a mock of ITempertureRecordService interface.
type MockITempertureRecordService struct {
	ctrl     *gomock.Controller
	recorder *MockITempertureRecordServiceMockRecorder
}

// MockITempertureRecordServiceMockRecorder is the mock recorder for MockITempertureRecordService.
type MockITempertureRecordServiceMockRecorder struct {
	mock *MockITempertureRecordService
}

// NewMockITempertureRecordService creates a new mock instance.
func NewMockITempertureRecordService(ctrl *gomock.Controller) *MockITempertureRecordService {
	mock := &MockITempertureRecordService{ctrl: ctrl}
	mock.recorder = &MockITempertureRecordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITempertureRecordService) EXPECT() *MockITempertureRecordServiceMockRecorder {
	return m.recorder
}

// CreateTempertureRecord mocks base method.
func (m *MockITempertureRecordService) CreateTempertureRecord(record model.TempertureRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTempertureRecord", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTempertureRecord indicates an expected call of CreateTempertureRecord.
func (mr *MockITempertureRecordServiceMockRecorder) CreateTempertureRecord(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTempertureRecord", reflect.TypeOf((*MockITempertureRecordService)(nil).CreateTempertureRecord), record)
}

// DeleteTempertureRecordByID mocks base method.
func (m *MockITempertureRecordService) DeleteTempertureRecordByID(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTempertureRecordByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTempertureRecordByID indicates an expected call of DeleteTempertureRecordByID.
func (mr *MockITempertureRecordServiceMockRecorder) DeleteTempertureRecordByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTempertureRecordByID", reflect.TypeOf((*MockITempertureRecordService)(nil).DeleteTempertureRecordByID), id)
}

// GetAllTempertureRecords mocks base method.
func (m *MockITempertureRecordService) GetAllTempertureRecords() ([]model.TempertureRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTempertureRecords")
	ret0, _ := ret[0].([]model.TempertureRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTempertureRecords indicates an expected call of GetAllTempertureRecords.
func (mr *MockITempertureRecordServiceMockRecorder) GetAllTempertureRecords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTempertureRecords", reflect.TypeOf((*MockITempertureRecordService)(nil).GetAllTempertureRecords))
}

// GetTempertureRecordByID mocks base method.
func (m *MockITempertureRecordService) GetTempertureRecordByID(id uint) (model.TempertureRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTempertureRecordByID", id)
	ret0, _ := ret[0].(model.TempertureRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTempertureRecordByID indicates an expected call of GetTempertureRecordByID.
func (mr *MockITempertureRecordServiceMockRecorder) GetTempertureRecordByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTempertureRecordByID", reflect.TypeOf((*MockITempertureRecordService)(nil).GetTempertureRecordByID), id)
}

// GetTempertureRecordsByProfileID mocks base method.
func (m *MockITempertureRecordService) GetTempertureRecordsByProfileID(profileID uint) ([]model.TempertureRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTempertureRecordsByProfileID", profileID)
	ret0, _ := ret[0].([]model.TempertureRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTempertureRecordsByProfileID indicates an expected call of GetTempertureRecordsByProfileID.
func (mr *MockITempertureRecordServiceMockRecorder) GetTempertureRecordsByProfileID(profileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTempertureRecordsByProfileID", reflect.TypeOf((*MockITempertureRecordService)(nil).GetTempertureRecordsByProfileID), profileID)
}

// GetTempertureRecordsByUserID mocks base method.
func (m *MockITempertureRecordService) GetTempertureRecordsByUserID(userID uint) ([]model.TempertureRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTempertureRecordsByUserID", userID)
	ret0, _ := ret[0].([]model.TempertureRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTempertureRecordsByUserID indicates an expected call of GetTempertureRecordsByUserID.
func (mr *MockITempertureRecordServiceMockRecorder) GetTempertureRecordsByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTempertureRecordsByUserID", reflect.TypeOf((*MockITempertureRecordService)(nil).GetTempertureRecordsByUserID), userID)
}

// UpdateTempertureRecordByID mocks base method.
func (m *MockITempertureRecordService) UpdateTempertureRecordByID(id uint, record model.TempertureRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTempertureRecordByID", id, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTempertureRecordByID indicates an expected call of UpdateTempertureRecordByID.
func (mr *MockITempertureRecordServiceMockRecorder) UpdateTempertureRecordByID(id, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTempertureRecordByID", reflect.TypeOf((*MockITempertureRecordService)(nil).UpdateTempertureRecordByID), id, record)
}
