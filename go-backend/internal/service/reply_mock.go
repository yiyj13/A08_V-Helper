// Code generated by MockGen. DO NOT EDIT.
// Source: reply.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	model "v-helper/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIReplyService is a mock of IReplyService interface.
type MockIReplyService struct {
	ctrl     *gomock.Controller
	recorder *MockIReplyServiceMockRecorder
}

// MockIReplyServiceMockRecorder is the mock recorder for MockIReplyService.
type MockIReplyServiceMockRecorder struct {
	mock *MockIReplyService
}

// NewMockIReplyService creates a new mock instance.
func NewMockIReplyService(ctrl *gomock.Controller) *MockIReplyService {
	mock := &MockIReplyService{ctrl: ctrl}
	mock.recorder = &MockIReplyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReplyService) EXPECT() *MockIReplyServiceMockRecorder {
	return m.recorder
}

// CreateReply mocks base method.
func (m *MockIReplyService) CreateReply(reply model.Reply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReply", reply)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReply indicates an expected call of CreateReply.
func (mr *MockIReplyServiceMockRecorder) CreateReply(reply interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReply", reflect.TypeOf((*MockIReplyService)(nil).CreateReply), reply)
}

// DeleteReplyByID mocks base method.
func (m *MockIReplyService) DeleteReplyByID(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplyByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReplyByID indicates an expected call of DeleteReplyByID.
func (mr *MockIReplyServiceMockRecorder) DeleteReplyByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplyByID", reflect.TypeOf((*MockIReplyService)(nil).DeleteReplyByID), id)
}

// GetAllReplys mocks base method.
func (m *MockIReplyService) GetAllReplys() ([]model.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllReplys")
	ret0, _ := ret[0].([]model.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReplys indicates an expected call of GetAllReplys.
func (mr *MockIReplyServiceMockRecorder) GetAllReplys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReplys", reflect.TypeOf((*MockIReplyService)(nil).GetAllReplys))
}

// GetReplyByID mocks base method.
func (m *MockIReplyService) GetReplyByID(id uint) (model.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplyByID", id)
	ret0, _ := ret[0].(model.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplyByID indicates an expected call of GetReplyByID.
func (mr *MockIReplyServiceMockRecorder) GetReplyByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplyByID", reflect.TypeOf((*MockIReplyService)(nil).GetReplyByID), id)
}

// GetReplysByArticleID mocks base method.
func (m *MockIReplyService) GetReplysByArticleID(articleID uint) ([]model.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplysByArticleID", articleID)
	ret0, _ := ret[0].([]model.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplysByArticleID indicates an expected call of GetReplysByArticleID.
func (mr *MockIReplyServiceMockRecorder) GetReplysByArticleID(articleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplysByArticleID", reflect.TypeOf((*MockIReplyService)(nil).GetReplysByArticleID), articleID)
}

// UpdateReplyByID mocks base method.
func (m *MockIReplyService) UpdateReplyByID(id uint, reply model.Reply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplyByID", id, reply)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReplyByID indicates an expected call of UpdateReplyByID.
func (mr *MockIReplyServiceMockRecorder) UpdateReplyByID(id, reply interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplyByID", reflect.TypeOf((*MockIReplyService)(nil).UpdateReplyByID), id, reply)
}
