// Code generated by MockGen. DO NOT EDIT.
// Source: vaccination_record.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	model "v-helper/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIVaccinationRecordService is a mock of IVaccinationRecordService interface.
type MockIVaccinationRecordService struct {
	ctrl     *gomock.Controller
	recorder *MockIVaccinationRecordServiceMockRecorder
}

// MockIVaccinationRecordServiceMockRecorder is the mock recorder for MockIVaccinationRecordService.
type MockIVaccinationRecordServiceMockRecorder struct {
	mock *MockIVaccinationRecordService
}

// NewMockIVaccinationRecordService creates a new mock instance.
func NewMockIVaccinationRecordService(ctrl *gomock.Controller) *MockIVaccinationRecordService {
	mock := &MockIVaccinationRecordService{ctrl: ctrl}
	mock.recorder = &MockIVaccinationRecordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVaccinationRecordService) EXPECT() *MockIVaccinationRecordServiceMockRecorder {
	return m.recorder
}

// CreateVaccinationRecord mocks base method.
func (m *MockIVaccinationRecordService) CreateVaccinationRecord(record model.VaccinationRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVaccinationRecord", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVaccinationRecord indicates an expected call of CreateVaccinationRecord.
func (mr *MockIVaccinationRecordServiceMockRecorder) CreateVaccinationRecord(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVaccinationRecord", reflect.TypeOf((*MockIVaccinationRecordService)(nil).CreateVaccinationRecord), record)
}

// DeleteVaccinationRecordByID mocks base method.
func (m *MockIVaccinationRecordService) DeleteVaccinationRecordByID(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVaccinationRecordByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVaccinationRecordByID indicates an expected call of DeleteVaccinationRecordByID.
func (mr *MockIVaccinationRecordServiceMockRecorder) DeleteVaccinationRecordByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVaccinationRecordByID", reflect.TypeOf((*MockIVaccinationRecordService)(nil).DeleteVaccinationRecordByID), id)
}

// GetAllVaccinationRecords mocks base method.
func (m *MockIVaccinationRecordService) GetAllVaccinationRecords() ([]model.VaccinationRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVaccinationRecords")
	ret0, _ := ret[0].([]model.VaccinationRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVaccinationRecords indicates an expected call of GetAllVaccinationRecords.
func (mr *MockIVaccinationRecordServiceMockRecorder) GetAllVaccinationRecords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVaccinationRecords", reflect.TypeOf((*MockIVaccinationRecordService)(nil).GetAllVaccinationRecords))
}

// GetAllVaccinationRecordsByIsCompleted mocks base method.
func (m *MockIVaccinationRecordService) GetAllVaccinationRecordsByIsCompleted(isCompleted bool) ([]model.VaccinationRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVaccinationRecordsByIsCompleted", isCompleted)
	ret0, _ := ret[0].([]model.VaccinationRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVaccinationRecordsByIsCompleted indicates an expected call of GetAllVaccinationRecordsByIsCompleted.
func (mr *MockIVaccinationRecordServiceMockRecorder) GetAllVaccinationRecordsByIsCompleted(isCompleted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVaccinationRecordsByIsCompleted", reflect.TypeOf((*MockIVaccinationRecordService)(nil).GetAllVaccinationRecordsByIsCompleted), isCompleted)
}

// GetVaccinationRecordByID mocks base method.
func (m *MockIVaccinationRecordService) GetVaccinationRecordByID(id uint) (model.VaccinationRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVaccinationRecordByID", id)
	ret0, _ := ret[0].(model.VaccinationRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaccinationRecordByID indicates an expected call of GetVaccinationRecordByID.
func (mr *MockIVaccinationRecordServiceMockRecorder) GetVaccinationRecordByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaccinationRecordByID", reflect.TypeOf((*MockIVaccinationRecordService)(nil).GetVaccinationRecordByID), id)
}

// GetVaccinationRecordsByProfileID mocks base method.
func (m *MockIVaccinationRecordService) GetVaccinationRecordsByProfileID(profileID uint) ([]model.VaccinationRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVaccinationRecordsByProfileID", profileID)
	ret0, _ := ret[0].([]model.VaccinationRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaccinationRecordsByProfileID indicates an expected call of GetVaccinationRecordsByProfileID.
func (mr *MockIVaccinationRecordServiceMockRecorder) GetVaccinationRecordsByProfileID(profileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaccinationRecordsByProfileID", reflect.TypeOf((*MockIVaccinationRecordService)(nil).GetVaccinationRecordsByProfileID), profileID)
}

// GetVaccinationRecordsByProfileIDAndIsCompleted mocks base method.
func (m *MockIVaccinationRecordService) GetVaccinationRecordsByProfileIDAndIsCompleted(profileID uint, isCompleted bool) ([]model.VaccinationRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVaccinationRecordsByProfileIDAndIsCompleted", profileID, isCompleted)
	ret0, _ := ret[0].([]model.VaccinationRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaccinationRecordsByProfileIDAndIsCompleted indicates an expected call of GetVaccinationRecordsByProfileIDAndIsCompleted.
func (mr *MockIVaccinationRecordServiceMockRecorder) GetVaccinationRecordsByProfileIDAndIsCompleted(profileID, isCompleted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaccinationRecordsByProfileIDAndIsCompleted", reflect.TypeOf((*MockIVaccinationRecordService)(nil).GetVaccinationRecordsByProfileIDAndIsCompleted), profileID, isCompleted)
}

// GetVaccinationRecordsByUserID mocks base method.
func (m *MockIVaccinationRecordService) GetVaccinationRecordsByUserID(userID uint) ([]model.VaccinationRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVaccinationRecordsByUserID", userID)
	ret0, _ := ret[0].([]model.VaccinationRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaccinationRecordsByUserID indicates an expected call of GetVaccinationRecordsByUserID.
func (mr *MockIVaccinationRecordServiceMockRecorder) GetVaccinationRecordsByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaccinationRecordsByUserID", reflect.TypeOf((*MockIVaccinationRecordService)(nil).GetVaccinationRecordsByUserID), userID)
}

// UpdateVaccinationRecordByID mocks base method.
func (m *MockIVaccinationRecordService) UpdateVaccinationRecordByID(id uint, record model.VaccinationRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVaccinationRecordByID", id, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVaccinationRecordByID indicates an expected call of UpdateVaccinationRecordByID.
func (mr *MockIVaccinationRecordServiceMockRecorder) UpdateVaccinationRecordByID(id, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVaccinationRecordByID", reflect.TypeOf((*MockIVaccinationRecordService)(nil).UpdateVaccinationRecordByID), id, record)
}
