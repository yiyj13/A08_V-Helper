// Code generated by MockGen. DO NOT EDIT.
// Source: article.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	model "v-helper/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIArticleService is a mock of IArticleService interface.
type MockIArticleService struct {
	ctrl     *gomock.Controller
	recorder *MockIArticleServiceMockRecorder
}

// MockIArticleServiceMockRecorder is the mock recorder for MockIArticleService.
type MockIArticleServiceMockRecorder struct {
	mock *MockIArticleService
}

// NewMockIArticleService creates a new mock instance.
func NewMockIArticleService(ctrl *gomock.Controller) *MockIArticleService {
	mock := &MockIArticleService{ctrl: ctrl}
	mock.recorder = &MockIArticleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIArticleService) EXPECT() *MockIArticleServiceMockRecorder {
	return m.recorder
}

// CreateArticle mocks base method.
func (m *MockIArticleService) CreateArticle(article model.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", article)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockIArticleServiceMockRecorder) CreateArticle(article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockIArticleService)(nil).CreateArticle), article)
}

// DeleteArticleByID mocks base method.
func (m *MockIArticleService) DeleteArticleByID(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticleByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticleByID indicates an expected call of DeleteArticleByID.
func (mr *MockIArticleServiceMockRecorder) DeleteArticleByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticleByID", reflect.TypeOf((*MockIArticleService)(nil).DeleteArticleByID), id)
}

// GetAllArticles mocks base method.
func (m *MockIArticleService) GetAllArticles() ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllArticles")
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllArticles indicates an expected call of GetAllArticles.
func (mr *MockIArticleServiceMockRecorder) GetAllArticles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllArticles", reflect.TypeOf((*MockIArticleService)(nil).GetAllArticles))
}

// GetArticleByID mocks base method.
func (m *MockIArticleService) GetArticleByID(id uint) (model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleByID", id)
	ret0, _ := ret[0].(model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleByID indicates an expected call of GetArticleByID.
func (mr *MockIArticleServiceMockRecorder) GetArticleByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleByID", reflect.TypeOf((*MockIArticleService)(nil).GetArticleByID), id)
}

// GetArticlesByUserID mocks base method.
func (m *MockIArticleService) GetArticlesByUserID(userID uint) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticlesByUserID", userID)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticlesByUserID indicates an expected call of GetArticlesByUserID.
func (mr *MockIArticleServiceMockRecorder) GetArticlesByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticlesByUserID", reflect.TypeOf((*MockIArticleService)(nil).GetArticlesByUserID), userID)
}

// GetArticlesByVaccineID mocks base method.
func (m *MockIArticleService) GetArticlesByVaccineID(vaccineID uint) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticlesByVaccineID", vaccineID)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticlesByVaccineID indicates an expected call of GetArticlesByVaccineID.
func (mr *MockIArticleServiceMockRecorder) GetArticlesByVaccineID(vaccineID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticlesByVaccineID", reflect.TypeOf((*MockIArticleService)(nil).GetArticlesByVaccineID), vaccineID)
}

// GetUnbindArticles mocks base method.
func (m *MockIArticleService) GetUnbindArticles() ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnbindArticles")
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnbindArticles indicates an expected call of GetUnbindArticles.
func (mr *MockIArticleServiceMockRecorder) GetUnbindArticles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnbindArticles", reflect.TypeOf((*MockIArticleService)(nil).GetUnbindArticles))
}

// UpdateArticleByID mocks base method.
func (m *MockIArticleService) UpdateArticleByID(id uint, article model.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleByID", id, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArticleByID indicates an expected call of UpdateArticleByID.
func (mr *MockIArticleServiceMockRecorder) UpdateArticleByID(id, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleByID", reflect.TypeOf((*MockIArticleService)(nil).UpdateArticleByID), id, article)
}
