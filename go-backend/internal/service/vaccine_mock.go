// Code generated by MockGen. DO NOT EDIT.
// Source: vaccine.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	model "v-helper/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIVaccineService is a mock of IVaccineService interface.
type MockIVaccineService struct {
	ctrl     *gomock.Controller
	recorder *MockIVaccineServiceMockRecorder
}

// MockIVaccineServiceMockRecorder is the mock recorder for MockIVaccineService.
type MockIVaccineServiceMockRecorder struct {
	mock *MockIVaccineService
}

// NewMockIVaccineService creates a new mock instance.
func NewMockIVaccineService(ctrl *gomock.Controller) *MockIVaccineService {
	mock := &MockIVaccineService{ctrl: ctrl}
	mock.recorder = &MockIVaccineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVaccineService) EXPECT() *MockIVaccineServiceMockRecorder {
	return m.recorder
}

// CreateVaccine mocks base method.
func (m *MockIVaccineService) CreateVaccine(vaccine model.Vaccine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVaccine", vaccine)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVaccine indicates an expected call of CreateVaccine.
func (mr *MockIVaccineServiceMockRecorder) CreateVaccine(vaccine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVaccine", reflect.TypeOf((*MockIVaccineService)(nil).CreateVaccine), vaccine)
}

// DeleteVaccineByID mocks base method.
func (m *MockIVaccineService) DeleteVaccineByID(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVaccineByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVaccineByID indicates an expected call of DeleteVaccineByID.
func (mr *MockIVaccineServiceMockRecorder) DeleteVaccineByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVaccineByID", reflect.TypeOf((*MockIVaccineService)(nil).DeleteVaccineByID), id)
}

// GetAllVaccines mocks base method.
func (m *MockIVaccineService) GetAllVaccines() ([]model.Vaccine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVaccines")
	ret0, _ := ret[0].([]model.Vaccine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVaccines indicates an expected call of GetAllVaccines.
func (mr *MockIVaccineServiceMockRecorder) GetAllVaccines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVaccines", reflect.TypeOf((*MockIVaccineService)(nil).GetAllVaccines))
}

// GetVaccineByID mocks base method.
func (m *MockIVaccineService) GetVaccineByID(id uint) (model.Vaccine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVaccineByID", id)
	ret0, _ := ret[0].(model.Vaccine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaccineByID indicates an expected call of GetVaccineByID.
func (mr *MockIVaccineServiceMockRecorder) GetVaccineByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaccineByID", reflect.TypeOf((*MockIVaccineService)(nil).GetVaccineByID), id)
}

// UpdateVaccineByID mocks base method.
func (m *MockIVaccineService) UpdateVaccineByID(id uint, vaccine model.Vaccine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVaccineByID", id, vaccine)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVaccineByID indicates an expected call of UpdateVaccineByID.
func (mr *MockIVaccineServiceMockRecorder) UpdateVaccineByID(id, vaccine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVaccineByID", reflect.TypeOf((*MockIVaccineService)(nil).UpdateVaccineByID), id, vaccine)
}
